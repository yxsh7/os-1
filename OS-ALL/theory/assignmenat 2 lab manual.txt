assignmenat 2 lab manual

Theory:
Implementation Details:
PART A:
Algorithm:
1: START
2: Accept array of integers from the user
3: Call Merge_sort() to sort the array of integers
4: Call fork() to create child
5: Using wait system call, wait for child to finish execution
6: if (pid == 0) i.e. if child process, then call quick_sort() to sort array using quick sort.
7: END
Input:
1: Array of Integers
Steps to execute:
Step 1: Compile file using ―gcc program_name.c –o program_name.out‖
Step 2: Execute the program using ./program_name.out
Step 3: Open 2 new terminals and using command ps –e –o pid, ppid, stat, command show
various states of the processes that are created & terminated from the program (use sleep and
wait functions as per the requirement to show zombie and orphan states).
PART B:
Algorithm:
File1.c
1: START
2: Accept array of integers from the user
3: Sort the array of integers using any sorting technique
4: Convert the integer numbers into string using sprintf(char * str, const char * format, ...)
5: Call the fork() function to create child process.
6: Using wait system call, wait for child to finish execution.
7: Call the execve() system call, and pass the second program name and the string converted
array as parameters to the execve system call.
8: END

File2.c
1: START
2: Convert the received string into integer array using atoi() function.
3: Ask the user which number to find
4: Call binary search function to search the particular number.
5: Return the location of the number if found, else print error.
6: END
Input:
1: Array of Integers
2: Number to find
Steps to execute:
Step 1: Compile file1 & file2 using ―gcc program_name.c –o program_name.out‖
Step 2: Execute the program using ―./file1.out file2.out
Zombie Processes
A zombie process is a process whose execution is completed but it still has an entry in the process table. Zombie processes usually occur for child processes, as the parent process still needs to read its child’s exit status. Once this is done using the wait system call, the zombie process is eliminated from the process table. This is known as reaping the zombie process.
A diagram that demonstrates the creation and termination of a zombie process is given as follows

Zombie processes don't use any system resources but they do retain their process ID. If there are a lot of zombie processes, then all the available process ID’s are monopolized by them. This prevents other processes from running as there are no process ID’s available.
Orphan Processes
Orphan processes are those processes that are still running even though their parent process has terminated or finished. A process can be orphaned intentionally or unintentionally.
An intentionally orphaned process runs in the background without any manual support. This is usually done to start an indefinitely running service or to complete a long-running job without user attention.
An unintentionally orphaned process is created when its parent process crashes or terminates. Unintentional orphan processes can be avoided using the process group mechanism.

Fork() System Call
When a parent process uses fork(), it creates a duplicate copy of itself and this duplicates becomes the child of the process. The fork() is implemented using clone() system call in linux which returns twice from kernel.
A non-zero value(Process ID of child) is returned to the parent.
A value of zero is returned to the child.
In case the child is not created successfully due to any issues like low memory, -1 is returned to the fork().
Let’s understand this with some code
pid); 
// Both child and parent will now start execution from here.
if(pid < 0) {
    //child was not created successfully
    return 1;
}
else if(pid == 0) {
    // This is the child process
    // Child process code goes here
}
else {
    // Parent process code goes here
}
printf("This is code common to parent and child");


How Parent and Child Process differs?
A parent and child differs in some of the PCB(process control block) attributes. These are:
PID - Both child and parent have a different Process ID.
Pending Signals - The child doesn’t inherit Parent’s pending signals. It will be empty for the child process when created.
Memory Locks - The child doesn’t inherit its parent’s memory locks. Memory locks are locks which can be used to lock a memory area and then this memory area cannot be swapped to disk.
Record Locks - The child doesn’t inherit its parent’s record locks. Record locks are associated with a file block or an entire file.
Process resource utilisation and CPU time consumed is set to zero for the child.
The child also doesn’t inherit timers from the parent.



Understanding process creation in operating system with fork, exec and wait system calls
A process begins its life when it is created. A process goes through different states before it gets terminated. The first state that any process goes through is the creation of itself. Process creation happens through the use of fork() system call, which creates a new process(child process) by duplicating an existing one(parent process). The process that calls fork() is the parent, whereas the new process is the child.
In most cases, we may want to execute a different program in child process than the parent. The exec() family of function calls creates a new address space and loads a new program into it.
Finally, a process exits or terminates using the exit() system call. This function frees all the resources held by the process(except for pcb). A parent process can enquire about the status of a terminated child using wait() system call. When the parent process uses wait() system call, the parent process is blocked till the child on which it is waiting terminates.

If you find reading boring, you can watch process creation videos to understand the below concepts.

Exec System Call
The exec family of functions replaces the current running program(executable) with a new executable. This is very useful when you want the child process to run a different program than the parent. Take example of the shell program. A shell takes commands as input from the user, runs it and displays the output on screen. Each command corresponds to a new program. The number of shell commands in any operating system is huge. It would be very bad code design to append the program or executable associated with all the available commands in a single program. In this case, the shell(parent process) can create a child process when a user types a command and let the child process execute the command.

Wait System Call
A process may wait on another process to complete its execution. The parent process may issue a wait system call, which suspends the execution of the parent process while the child executes. When the child process terminates, it returns an exit status to the operating system, which is then returned to the waiting parent process. The parent process then resumes execution.
When the child terminates, the kernel notifies this to the waiting parent using signal(SIGCHLD) and allowing it to retrieve the child process’s exit status.
In the above code example used for exec() system call, the shell(parent process) was waiting for its child to complete. Once the child terminates, it can return the output and exit code of the command to the user.

Exit System Call
A computer process terminates its execution by making an exit system call. When the child process terminates (“dies”), either normally by calling exit, or abnormally due to a fatal exception or signal (e.g., SIGTERM, SIGINT, SIGKILL), an exit status is returned to the operating system and a SIGCHLD signal is sent to the parent process. The exit status can then be retrieved by the parent process via the wait system call.


How Parent and Child Process differs?
A parent and child differs in some of the PCB(process control block) attributes. These are:
PID - Both child and parent have a different Process ID.
Pending Signals - The child doesn’t inherit Parent’s pending signals. It will be empty for the child process when created.
Memory Locks - The child doesn’t inherit its parent’s memory locks. Memory locks are locks which can be used to lock a memory area and then this memory area cannot be swapped to disk.
Record Locks - The child doesn’t inherit its parent’s record locks. Record locks are associated with a file block or an entire file.
Process resource utilisation and CPU time consumed is set to zero for the child.
The child also doesn’t inherit timers from the parent.


Fork() System Call
When a parent process uses fork(), it creates a duplicate copy of itself and this duplicates becomes the child of the process. The fork() is implemented using clone() system call in linux which returns twice from kernel.
A non-zero value(Process ID of child) is returned to the parent.
A value of zero is returned to the child.
In case the child is not created successfully due to any issues like low memory, -1 is returned to the fork().
Let’s understand this with some code
pid = fork(); 
// Both child and parent will now start execution from here.
if(pid < 0) {
    //child was not created successfully
    return 1;
}
else if(pid == 0) {
    // This is the child process
    // Child process code goes here
}
else {
    // Parent process code goes here
}
printf("This is code common to parent and child");



FAQ’s
1. What is a system call? Explain briefly execve system call.
A system call is a request made by a program running in user space to the operating system to perform privileged operations, such as file I/O, process management, or hardware control. It provides a controlled interface for applications to interact with the underlying operating system's services and resources. System calls are a key component of the operating system's API, allowing user-level software to access and utilize the OS's capabilities.

2. List and explain different states of a process.
New:
The process is being created but has not yet been admitted to the system.
Initial resources and memory allocation take place in this state.
Ready:
The process is prepared to execute but is waiting for CPU time.
Multiple processes can be in the ready state, and a scheduling algorithm determines which one runs next.
Running:
The process is actively executing on the CPU.
Only one process can be in the running state on a single CPU core at a time.
Blocked (or Waiting):
Processes enter this state when they are waiting for an event or resource (e.g., I/O operation or user input).
They are temporarily suspended until the required event occurs.
Terminated (or Completed):
The process has finished its execution or has been explicitly terminated.
Resources associated with the process are released, and it is removed from the system.

3. What is a process? Explain how Process is represented internally.
A process is an executing program with its own memory space and system resources. 
Internally, a process is represented by:
A Process Control Block (PCB) containing process-specific information.
Program code and data.
Stack for function call management.
Heap for dynamic memory allocation.
File descriptors for I/O.
A unique Process Identifier (PID).
Register values, status information, and more.
These components collectively define and manage the execution of a program in an operating system.

4. What is orphan process?
An orphan process is a child process that continues to run after its parent process has completed or terminated. Orphan processes are typically adopted by the init process (with PID 1) in Unix-like operating systems

2. Explain WAIT system call.
The WAIT system call is used by a parent process to wait for the termination of its child process. It allows the parent process to block its execution until the child process exits, ensuring that the parent can retrieve information about the child's termination status, such as its exit code. This is a way for the parent process to coordinate and synchronize with its child processes.

3. Describe FORK system call
The FORK system call creates a new process by duplicating the existing process, resulting in two identical processes. The new process is referred to as the child, and the original process is the parent. The child inherits a copy of the parent's memory, file descriptors, and program counter. After the FORK, both processes continue execution from the point of the FORK call, but they can differentiate their behavior based on the return value of FORK. In the parent process, FORK returns the child's PID, while in the child process, it returns 0. This system call is fundamental for creating new processes in Unix-like operating systems.

define zombie process

A zombie process is a state that a child process enters after it has completed its execution but still has an entry in the process table. In this state, the child process is considered "dead" but has not yet had its exit status collected by its parent process. Zombie processes consume minimal system resources and exist temporarily until their parent process retrieves their exit status using system calls like wait() or waitpid(), at which point they are removed from the process table




